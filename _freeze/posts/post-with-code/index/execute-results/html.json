{
  "hash": "aad39d00dd4e8a612ce569df56fed9cd",
  "result": {
    "markdown": "---\ntitle: \"Le package Heron\"\nauthor: \"Tranvouez Benoit-Alexandre\"\nimage: \"heron.jpg\"\nlang: fr\ndate: \"2023-02-13\"\ncategories: [code, package, mathématiques]\n---\n\n\n## Librairie Heron\n\nLa librairie heron permet de calculer l'aire d'un triangle en prenant pour argument ses trois longueurs.\n\nLa formule de Heron prend quatre arguments, les trois longueurs du triangles et le semi-périmètre de ce triangle.\n\n$$\nAire\\ d' Heron = \\sqrt{p\\times(p-a)(p-b)(p-c)}\n$$\n\nLa formule du demi-périmétre est la suivante :\n\n$$\n p\\ = \\frac{a+b+c}{2} \n$$\n\nLe package peut être téléchargé sur mon github personnel pour se faire il suffit d'executer les commandes suivantes dans la console R. Veuilliez à étre connecté à internet pour pouvoir le télécharger.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"Tranvouez/heron\")\nlibrary(heron)\n```\n:::\n\n\nLe détail de la fonction héron est le suivant :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheron <- function(a, b, c) {\n  if (!is.numeric(c(a, b, c))) {\n    stop(\"Valeur(s) non numerique(s).\")\n  }\n  else if (a < 0 | b < 0 | c < 0) {\n    stop(\"Longueur(s) négative(s).\")\n  }\n  else if (a == 0 | b == 0 | c == 0) {\n    warning(\"Longueur(s) nulle(s).\")\n\n  }\n    p <- demi_perimetre(a, b, c)\n  return(sqrt(p * ((p - a) * (p - b) * (p - c))))\n}\n```\n:::\n\n\n## \n\nTriangle de Sierpiński\n\nLes triangles de Sierpinski rentrent dans l'analyse des Fractales, très largement démocratisés par Benoît Mandelbrot. Un fractale est une figure mathématique qui aura une structure similaire répété un nombre très élevé de fois. On peut nommé le flocon de Koch qui prend un triangle est ajoute 4 fois l'identique de ce triangle à chaque itérations à ce même triangle.\n\nDe la même façon, Sierpinski décide de prendre un triangle équilateral dans lequel il trace 4 triangles de même taille et retire le triangle centrale. On répéte l'opération un nombre de fois extremement élevé et à terme on obtient un triangle dont l'aire tend vers zéro.\n\nNous allons appliquer cet algorithme et utiliser la fonction heron pour calculer cet aire et expliciter sa décroissance.\n\n\n::: {.cell}\n\n:::\n\n\n### Première itération :\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"L'aire du triangle est de  0.1875\"\n```\n:::\n:::\n\n\n### Deuxième itération :\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"L'aire du triangle est de  0.1406\"\n```\n:::\n:::\n\n\n### Troisième itération :\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"L'aire du triangle est de  0.1055\"\n```\n:::\n:::\n\n\n### Quatrième itération :\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"L'aire du triangle est de  0.0791\"\n```\n:::\n:::\n\n\n\\newline\n\nOn s'apperçoit bien de la décroissance des aires.\n\n### \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}